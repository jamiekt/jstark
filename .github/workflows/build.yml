name: build

on:
  push:

jobs:
  pylint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Ensure latest pip
      run: python -m pip install --upgrade pip

    - name: Install Hatch
      run: pip install hatch

    - run: |
        hatch run pylint --rcfile .github/linters/pylintrc jstark tests >> pylint.out || true
        echo "$(<pylint.out)"
        PYLINT_SCORE=$(sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' < pylint.out)
        echo PYLINT_SCORE="${PYLINT_SCORE}"
        hatch run anybadge -l pylint -v ${PYLINT_SCORE} -f pylint.svg 2=red 4=orange 8=yellow 10=green

    - run: mkdir _site && cp pylint.out _site/. && cp pylint.svg _site/.
    - name: Upload GitHub Pages artifact
      uses: actions/upload-pages-artifact@v1

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Super-Linter
      uses: github/super-linter/slim@v4
      env:
        VALIDATE_ALL_CODEBASE: true
        VALIDATE_PYTHON_ISORT: false
        DEFAULT_BRANCH: main
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  run:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.7', '3.8', '3.9', '3.10'] #not on 3.11 until https://issues.apache.org/jira/browse/SPARK-41125 is fixed
    name: Python ${{ matrix.python-version }} on ${{ startsWith(matrix.os, 'macos-') && 'macOS' || startsWith(matrix.os, 'windows-') && 'Windows' || 'Linux' }}
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Ensure latest pip
      run: python -m pip install --upgrade pip

    - name: Install Hatch
      run: pip install hatch

    - name: install ourself
      run: |
        pip install -e .

    - name: Run tests
      run: hatch run pytest -vvv --durations=1 --cov=jstark

    - name: generate coverage badge
      run: hatch run coverage-badge -o coverage.svg -f

    - name: generate coverage html report
      run: hatch run coverage html


    - run: mkdir _site && cp coverage.svg _site/. && cp -r htmlcov _site/.
    - name: Upload GitHub Pages artifact
      uses: actions/upload-pages-artifact@v1

  # Deploy job
  deploy-to-github-pages:
    # Add a dependency to the build job
    needs: run

    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source

    # Deploy to the github-pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    # Specify runner + deployment step
    runs-on: ubuntu-latest
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v1
